---

- name: "Restores a Borg backup of the local dumps from the Backup Server to a target AWX system."
  hosts: "{{ 'awx_servers' }}"
  gather_facts: false

  #vars_prompt:
  #  - name: "backup_server_ip"
  #    prompt: "What is the IP address of the Backup Server?"
  #    private: no
  #  - name: "awx_url"
  #    prompt: "What is the URL of the new AWX Server?"
  #    private: no
  #  - name: "borg_backup"
  #    prompt: "What is the name of the borg backup to restore?"
  #    private: no
  #  - name: "backup_passphrase"
  #    prompt: "What is the passphrase for the Backup Server?"
  #    private: yes

  tasks:
    - name: Add prerequisite packages to Backup Server
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.apt:
        pkg:
        - rsync
      register: package_status
      until: package_status is success
      delay: 6
      retries: 10

    - name: Add prerequisite packages to new AWX Server
      ansible.builtin.apt:
        pkg:
        - rsync
      register: package_status
      until: package_status is success
      delay: 6
      retries: 10

    - name: Create borg user on AWX server
      ansible.builtin.user:
        name: borg
        shell: /bin/bash
        password: '!'

    - name: Create borg user on Backup server
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.user:
        name: borg
        shell: /bin/bash
        password: '!'

    - name: "Empty extracted directory on Backup Server."
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.file:
        state: absent
        path: /home/borg/extracted
        state: directory
        owner: borg
        group: borg
        mode: '0755'

    - name: "Ensure extracted directory exists on Backup Server."
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.file:
        path: /home/borg/extracted
        state: directory
        owner: borg
        group: borg
        mode: '0755'

    - name: "Empty extracted directory on the new AWX Server."
      ansible.builtin.file:
        state: absent
        path: /home/borg/extracted
        state: directory
        owner: borg
        group: borg
        mode: '0755'

    - name: "Ensure extracted directory exists on the new AWX Server."
      ansible.builtin.file:
        path: /home/borg/extracted
        state: directory
        owner: borg
        group: borg
        mode: '0755'

    - name: Generate or regenerate a Borgmatic SSH e25519 keypair
      delegate_to: '{{ backup_server_ip }}'
      community.crypto.openssh_keypair:
        comment: "Borgmatic Backup Server > New AWX Server."
        path: /home/borg/.ssh/borg_transfer
        type: "ed25519"
        regenerate: always
        owner: borg
        group: borg
        mode: '0600'

    - name: Add SSH config entry for accessing the backup server
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.blockinfile:
        path: "/home/borg/.ssh/config"
        marker_begin: "BEGIN SSH config entry for {{ awx_url }} backup transmission"
        marker_end: "END SSH config entry for {{ awx_url }} backup transmission"
        block: |
          Host {{ awx_url }}
              HostName {{ awx_url }}
              User borg
              Port 22
              IdentityFile /home/borg/.ssh/borg_transfer
              IdentitiesOnly=yes
        owner: borg
        group: borg
        mode: '0600'
        create: yes

    - name: Slurp up new borg_transfer.pub key
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.slurp:
        src: /home/borg/.ssh/borg_transfer.pub
      register: borg_transfer_ssh_public_key

    - name: Create borg user on the new AWX server
      ansible.builtin.user:
        name: borg
        shell: /bin/bash
        password: '!'

    - name: Write public SSH key to authorized_keys file on the new AWX Server
      ansible.builtin.lineinfile:
        path: /home/borg/.ssh/authorized_keys
        regexp: '^.*Borgmatic Backup Server > New AWX Server.*$'
        line: "{{ borg_transfer_ssh_public_key['content'] | b64decode }}"
        owner: borg
        group: borg
        mode: '0600'
        create: yes

    - name: Extract the specified borg backup to the Backup Server
      delegate_to: '{{ backup_server_ip }}'
      become: yes
      become_user: borg
      ansible.builtin.command: |
          borg extract /home/borg/AWX/::{{ borg_backup }} data/backup/
      args:
        chdir: /home/borg/extracted
      environment:
        BORG_PASSPHRASE: "{{ backup_passphrase }}"

    - name: Perform initial SSH handshake, accept the key blindly
      become: yes
      become_user: borg
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.command: |
          ssh -o "StrictHostKeyChecking no" {{ awx_url }} exit

    - name: Transmit those backed up files to the new AWX Server
      become: yes
      become_user: borg
      delegate_to: '{{ backup_server_ip }}'
      ansible.builtin.command: |
          rsync -av /home/borg/extracted/data/backup {{ awx_url }}:/home/borg/extracted/

    - name: Create a list of the new local dump files
      shell: |
          ls -1 /home/borg/extracted/backup/ | grep tower
      register: move_list_dumps

    - name: Move the local dumps to /data/backup/ on the new AWX Server
      ansible.builtin.copy:
        src: "/home/borg/extracted/backup/{{ item }}"
        dest: "/data/backup/"
        remote_src: true
        owner: root
        group: root
        mode: '0755'
      loop: "{{ move_list_dumps.stdout_lines }}"

    - name: Collect a list of available local dumps on the new AWX Server
      become: yes
      become_user: borg
      ansible.builtin.shell: |
          ls -1 /data/backup/ | grep tower
      register: local_dumps_list

    - name: "Print the list of available local dumps on the new AWX Server."
      debug:
        msg: "{{ local_dumps_list.stdout_lines }}"