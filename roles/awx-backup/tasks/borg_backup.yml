---

- name: Include AWX master token from awx_tokens.yml
  delegate_to: localhost
  include_vars:
    file: /tmp/awx/tokens.yml
  no_log: True

- name: Create a AWX session token for executing AWX modules
  awx.awx.tower_token:
    description: 'AWX Session Token'
    scope: "write"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ master_token }}"
    validate_certs: yes
  register: awx_session_token

- name: Add Backup Server host to the AWX Server inventory
  awx.awx.tower_host:
    name: "{{ backup_server_ip }}"
    description: "The Backup Server, accessed at its IP."
    inventory: "AWX Server"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Create borg user on AWX server
  ansible.builtin.user:
    name: borg
    shell: /bin/bash
    #shell: /bin/rbash
    password: '!'
    #generate_ssh_key: yes
    #ssh_key_type: ed25519
    #ssh_key_file: .ssh/borgmatic

- name: Create borg users ~/.ssh if it does not exist
  ansible.builtin.file:
    path: /home/borg/.ssh/
    state: directory
    owner: borg
    group: borg
    mode: '0700'

- name: Create borg users ~/.cache if it does not exist
  ansible.builtin.file:
    path: /home/borg/.cache/
    state: directory
    owner: borg
    group: borg
    mode: '0755'

#awx_ssh_pubkey: '/home/michael/.ssh/matrixtesting6_ed25519.pub'
#awx_ssh_key: '/home/michael/.ssh/matrixtesting6_ed25519'
#awx_ssh_key_password: 'lwOQHst0tfPPzJJtzAFD'

# generate a strong password

#- name: Generate a Borgmatic SSH key password with openssl
#  command: |
#      openssl rand -base64 32
#  register: ssh_password


# generate key pair at .ssh/borgmatic

- name: Generate or regenerate a Borgmatic SSH e25519 keypair
  community.crypto.openssh_keypair:
    comment: "Borgmatic AWX Server  > Backup Server."
    path: /home/borg/.ssh/borgmatic
    type: "ed25519"
    regenerate: always
    owner: borg
    group: borg
    mode: '0600'

- name: Generate or regenerate a borg_user SSH e25519 keypair
  community.crypto.openssh_keypair:
    comment: "'borg' user on AWX & Backup servers."
    path: /home/borg/.ssh/borg_user
    type: "ed25519"
    regenerate: always
    owner: borg
    group: borg
    mode: '0600'

#- name: Remove the existing Borgmatix SSH keypair
#  command: |
#      rm /home/borg/.ssh/borgmatic /home/borg/.ssh/borgmatic.pub
#  ignore_errors: true

#- name: Generate a Borgmatic SSH keypair
#  command: |
#      ssh-keygen -t ed25519 -f /home/borg/.ssh/borgmatic -q -C "'borg@{{ awx_url }} Generated: {{ ansible_date_time.date }}-{{ ansible_date_time.time }}'"

# save password as AWX credential

- name: Create a Vault credential for Borgmatic Password
  awx.awx.credential:
    name: Borgmatic Password
    credential_type: Vault
    organization: "{{ org_name }}"
    inputs:
      vault_password: "{{ backup_passphrase }}"
      vault_id: "awx_borg_password"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Slurp up new borg_user private key
  ansible.builtin.slurp:
    src: /home/borg/.ssh/borg_user
  register: borg_user_ssh_private_key

- name: Add/Update machine credential
  awx.awx.credential:
    name: "AWX SSH Key"
    description: "The SSH key for AWX to connect to its own host OS as the borg user. Also the SSH key it uses to do the borgmatic backup."
    organization: "{{ org_name }}"
    credential_type: Machine
    state: present
    inputs:
      ssh_key_data: "{{ borg_user_ssh_private_key['content'] | b64decode }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Delete private borg_user SSH e25519 key
  ansible.builtin.file:
    state: absent
    path: /home/borg/.ssh/borg_user

# include in job templates



#- name: Set variable for public key content
#  set_fact:
#    ssh_public_key: "{{ lookup('ansible.builtin.file','{{ awx_ssh_pubkey }}') }}"


- name: Slurp up new borg_user.pub key
  ansible.builtin.slurp:
    src: /home/borg/.ssh/borg_user.pub
  register: borg_user_ssh_public_key

- name: Set authorized key to allow this public key on the AWX Server
  ansible.builtin.lineinfile:
    path: /home/borg/.ssh/authorized_keys
    #regexp: '^.*$'
    line: "{{ borg_user_ssh_public_key['content'] | b64decode }}"
    create: true
    owner: borg
    group: borg
    mode: '0600'

- name: Set authorized key to allow this public key on the Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.lineinfile:
    path: /home/borg/.ssh/authorized_keys
    #regexp: '^.*$'
    line: "{{ borg_user_ssh_public_key['content'] | b64decode }}"
    create: true
    owner: borg
    group: borg
    mode: '0600'

- name: Create 'Backup AWX [Borgmatic]' job template
  awx.awx.tower_job_template:
    name: "Backup AWX [Borgmatic]"
    description: "Backs up the AWX host system to the external Backup Server."
    job_type: run
    inventory: "AWX Server"
    project: "AWX Ansible"
    playbook: projects/backup.yml
    credentials: [ "AWX SSH Key", "Borgmatic SSH Password" ]
    extra_vars: { awx_url: "{{ awx_url }}", BORG_PASSPHRASE: "{{ backup_passphrase }}", ansible_user: "borg" }
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Create 'Backup AWX' workflow template
  awx.awx.workflow_job_template:
    name: "Backup AWX"
    description: "Backup the AWX server by first making a local dump, then using borgmatic to back it up."
    workflow_nodes:
      - identifier: "Local Dump"
        job_type: run
        unified_job_template:
          name: "Backup AWX [Local Dump]"
          type: job_template
        related:
          success_nodes:
            - identifier: "Borgmatic"
          failure_nodes: []
          always_nodes: []
      - identifier: "Borgmatic"
        job_type: run
        unified_job_template:
          name: "Backup AWX [Borgmatic]"
          type: job_template
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Collect timezone of AWX server (Debian and derivatives only)
  command: cat /etc/timezone
  register: timezone_output

- name: Create an rrule string for scheduling 'Backup AWX'
  set_fact:
    rrule_line_backup_awx: "DTSTART;TZID={{ timezone_output.stdout }}:{{ backup_awx_schedule_start }} RRULE:FREQ={{ backup_awx_schedule_frequency }};INTERVAL={{ backup_awx_schedule_interval }}"

- name: Build a schedule for 'Backup AWX' workflow template
  awx.awx.tower_schedule:
    name: "Backup AWX"
    enabled: yes
    state: present
    unified_job_template: "Backup AWX"
    rrule: "{{ rrule_line_backup_awx }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Create 'Backup AWX [List Backups]' job template
  awx.awx.tower_job_template:
    name: "Backup AWX [List Backups]"
    description: "Lists the local dumps on the AWX server and the remote borgmatic history."
    job_type: run
    inventory: "AWX Server"
    project: "AWX Ansible"
    playbook: project/backups-list.yml
    credential: "AWX SSH Key"
    extra_vars: { awx_url: "{{ awx_url }}", backup_server_ip: "{{ backup_server_ip }}", BORG_PASSPHRASE: "{{ backup_passphrase }}", ansible_user: "borg" }
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Delete the AWX session token for executing modules
  awx.awx.tower_token:
    description: 'AWX Session Token'
    scope: "write"
    state: absent
    existing_token_id: "{{ awx_session_token.ansible_facts.tower_token.id }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Add prerequisite packages to Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Add prerequisite packages to AWX
  ansible.builtin.apt:
    pkg:
    - borgmatic
    - sudo
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Ensure root users ~/.ssh/ folder exists on AWX
  ansible.builtin.file:
    path: /root/.ssh/
    state: directory
    mode: 0700
    owner: root
    group: root

- name: Ensure root users ~/.ssh/ folder exists on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.file:
    path: /home/borg/.ssh/
    state: directory
    mode: 0700
    owner: borg
    group: borg

- name: Slurp up new borgmatric.pub key
  ansible.builtin.slurp:
    src: /home/borg/.ssh/borgmatic.pub
  register: borgmatic_ssh_public_key

- name: Write public SSH key to authorized_keys of backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.lineinfile:
    path: /home/borg/.ssh/authorized_keys
    regexp: '^command="borg serve --restrict-to-path {{ backup_directory }}",restrict.*$'
    line: |
        command="borg serve --restrict-to-path {{ backup_directory }}",restrict {{ borgmatic_ssh_public_key['content'] | b64decode }}
    owner: borg
    group: borg
    mode: '0600'
    create: yes

- name: Add SSH config entry for accessing the backup server
  ansible.builtin.blockinfile:
    path: "/home/borg/.ssh/config"
    marker_begin: "BEGIN SSH config entry for backup server"
    marker_end: "END SSH config entry for backup server"
    block: |
      Host {{ backup_server_ip }}
          HostName {{ backup_server_ip }}
          User borg
          Port 22
          IdentityFile /home/borg/.ssh/borgmatic
          IdentitiesOnly=yes
    owner: borg
    group: borg
    mode: '0600'
    create: yes

- name: Perform initial SSH handshake, accept the key blindly
  become: yes
  become_user: borg
  ansible.builtin.command: |
      ssh -o "StrictHostKeyChecking no" {{ backup_server_ip }} exit
  #environment:
  #  SSH_ASKPASS: 'rbash /tmp/cough.sh'
  #ignore_errors: true

- name: Install Borgmatic on AWX
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Install Borgmatic on the backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Ensure backup directory exists on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.file:
    path: '{{ backup_directory }}'
    state: directory
    mode: 0755
    owner: borg
    group: borg

#- name: Add environment variable for borg user on AWX Server
#  ansible.builtin.lineinfile:
#    path: /home/borg/.profile
#    regexp: '^export BORG_PASSPHRASE=./*$'
#    line: "export BORG_PASSPHRASE={{ backup_passphrase }}"
#    create: yes
#    owner: borg
#    group: borg
#    mode: '0600'

#- name: Add environment variable for borg user on Backup Server
#  delegate_to: '{{ backup_server_ip }}'
#  ansible.builtin.lineinfile:
#    path: /home/borg/.profile
#    regexp: '^export BORG_PASSPHRASE=./*$'
#    line: "export BORG_PASSPHRASE={{ backup_passphrase }}"
#    create: yes
#    owner: borg
#    group: borg
#    mode: '0600'

- name: Perform borg init on backup server
  delegate_to: '{{ backup_server_ip }}'
  become: yes
  become_user: borg
  shell: 'borg init --encryption=repokey {{ backup_directory }}'
  environment:
    BORG_PASSPHRASE: '{{ backup_passphrase }}'
  args:
    creates: '{{ backup_directory }}nonce'

- name: Ensure borgmatic config directory exists on AWX Server
  ansible.builtin.file:
    path: "/home/borg/.config/borgmatic/"
    state: directory
    mode: 0755
    owner: borg
    group: borg

- name: Ensure ansible config directory exists on AWX Server
  ansible.builtin.file:
    path: "/home/borg/.ansible/"
    state: directory
    mode: 0755
    owner: borg
    group: borg

- name: Save borgmatic config file on AWX Server
  template:
    src: '{{ role_path }}/templates/borg-config.yaml.j2'
    dest: '/home/borg/.config/borgmatic/config.yaml'

- name: Save cleanup.sh file on AWX Server
  template:
    src: '{{ role_path }}/templates/cleanup.sh.j2'
    dest: '/data/backup/cleanup.sh'
    attributes: "+i"
    mode: 0554
    owner: root
    group: root

- name: Save list.sh file on AWX Server
  template:
    src: '{{ role_path }}/templates/list.sh'
    dest: '/data/backup/list.sh'
    attributes: "+i"
    mode: 0554
    owner: borg
    group: borg
