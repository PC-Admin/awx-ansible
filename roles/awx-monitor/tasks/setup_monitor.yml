---

- name: Install Prometheus Node Exporter on the AWX Server
  ansible.builtin.package:
    pkg:
    - prometheus
    - prometheus-node-exporter
  register: package_status
  until: package_status is success
  delay: 6
  retries: 10

- name: Make sure Prometheus unit is running and enabled on AWX Server
  ansible.builtin.systemd:
    state: started
    name: prometheus
    enabled: yes

- name: Make sure Prometheus Node Exporter unit is running and enabled on AWX Server
  ansible.builtin.systemd:
    state: started
    name: prometheus-node-exporter
    enabled: yes

- name: Install the Grafana prerequisites on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.package:
    pkg:
    - docker.io
    - docker-compose
    #- apache2
    #- apt-transport-https
    #- certbot
    #- python3-certbot-apache
  register: package_status
  until: package_status is success
  delay: 6
  retries: 10

- name: Install Prometheus Node Exporter on the Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.package:
    pkg:
    - prometheus
    - prometheus-node-exporter
  register: package_status
  until: package_status is success
  delay: 6
  retries: 10

- name: Make sure Prometheus unit is running and enabled on AWX Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: started
    name: prometheus
    enabled: yes

- name: Make sure Prometheus Node Exporter unit is running and enabled on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: started
    name: prometheus-node-exporter
    enabled: yes

- name: Update repos on the Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.package:
    update_cache: yes
  register: package_status
  until: package_status is success
  delay: 6
  retries: 10

#- name: Stop grafana in Docker
#  delegate_to: '{{ backup_server_ip }}'
#  command: /usr/bin/docker stop grafana
#  ignore_errors: True

- name: Ensure Grafana image is pulled
  delegate_to: '{{ backup_server_ip }}'
  command: docker pull grafana/grafana 

- name: Ensure grafana.service installed
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/grafana.service.j2"
    dest: "/etc/systemd/system/grafana.service"
    mode: 0644

- name: Git checkout
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.git:
    repo: 'https://github.com/Spansky/apache-and-letsencrypt.git'
    dest: /root/apache-and-letsencrypt/
    version: 054d09ad17edcce73acc3fe038ed14084233cb50
    force: true

#- name: Extract apache-and-letsencrypt.tar.xz repo to /root
#  delegate_to: '{{ backup_server_ip }}'
#  unarchive:
#    src: '{{ role_path }}/repos/apache-and-letsencrypt.tar.xz'
#    dest: /root/
#    owner: root
#    group: root

- name: Ensure index.html file for apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/temp_apache/index.html"
    dest: "/root/apache-and-letsencrypt/letsencrypt/html/index.html"
    mode: 0644

- name: Ensure Dockerfile for apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/temp_apache/Dockerfile"
    dest: "/root/apache-and-letsencrypt/letsencrypt/"
    mode: 0644

- name: Ensure httpd.conf for apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/temp_apache/httpd.conf.j2"
    dest: "/root/apache-and-letsencrypt/letsencrypt/httpd.conf"
    mode: 0644

- name: Ensure docker-compose.yml for apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/temp_apache/docker-compose.yml"
    dest: "/root/apache-and-letsencrypt/letsencrypt/docker-compose.yml"
    mode: 0644

#    Build the webserver via docker build -t lets-encrypt-apache .

- name: Build the temporary letsencrypt-apache Docker image
  delegate_to: '{{ backup_server_ip }}'
  command: docker build -t letsencrypt-apache .
  args:
    chdir: /root/apache-and-letsencrypt/letsencrypt/
    creates: /docker-volumes/etc/letsencrypt/live/{{ grafana_url }}/fullchain.pem

#    Start it via docker-compose up -d

- name: Start it via docker-compose up -d
  delegate_to: '{{ backup_server_ip }}'
  command: docker-compose up -d
  args:
    chdir: /root/apache-and-letsencrypt/letsencrypt/
    creates: /docker-volumes/etc/letsencrypt/live/{{ grafana_url }}/fullchain.pem

# $ docker run -it --rm -v /docker-volumes/etc/letsencrypt:/etc/letsencrypt -v /docker-volumes/var/lib/letsencrypt:/var/lib/letsencrypt 
# -v $PWD/html:/data/letsencrypt -v /docker-volumes/var/log/letsencrypt:/var/log/letsencrypt certbot/certbot certonly --webroot --email perthchat@protonmail.com 
# --agree-tos --no-eff-email --webroot-path=/data/letsencrypt -d grafana2.snowsupport.top

- name: When your webserver is running, start the certbot docker (from dockerhub)
  delegate_to: '{{ backup_server_ip }}'
  shell: |
      docker run -it --rm \
      -v /docker-volumes/etc/letsencrypt:/etc/letsencrypt \
      -v /docker-volumes/var/lib/letsencrypt:/var/lib/letsencrypt \
      -v $PWD/html:/data/letsencrypt \
      -v /docker-volumes/var/log/letsencrypt:/var/log/letsencrypt \
      certbot/certbot \
      certonly --webroot \
      --email {{ certbot_email }} --agree-tos --no-eff-email \
      --webroot-path=/data/letsencrypt \
      -d {{ grafana_url }}
  args:
    chdir: /root/apache-and-letsencrypt/letsencrypt/
    creates: /docker-volumes/etc/letsencrypt/live/{{ grafana_url }}/fullchain.pem
  register: run_certbot_output

- debug:
    msg: "{{ run_certbot_output.stdout }}"

- name: Create fact for successful letsencrypt request
  set_fact:
    success_message: "Successfully received certificate."
  args:
    creates: /docker-volumes/etc/letsencrypt/live/{{ grafana_url }}/fullchain.pem

- name: If the letsencrypt request succeeded, run docker-compose down
  delegate_to: '{{ backup_server_ip }}'
  command: |
      docker-compose down
  args:
    chdir: /root/apache-and-letsencrypt/letsencrypt/
#  when: success_message in run_certbot_output.stdout

# contains "Successfully received certificate."

- name: Ensure Dockerfile for prod-apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/prod_apache/Dockerfile"
    dest: "/root/apache-and-letsencrypt/production/"
    mode: 0644

- name: Ensure httpd.conf for prod-apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/prod_apache/httpd.conf.j2"
    dest: "/root/apache-and-letsencrypt/production/httpd.conf"
    mode: 0644

- name: Ensure docker-compose.yml for prod-apache is templated
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/prod_apache/docker-compose.yml.j2"
    dest: "/root/apache-and-letsencrypt/production/docker-compose.yml"
    mode: 0644

- name: Build the production apache Docker image
  delegate_to: '{{ backup_server_ip }}'
  command: docker build -t productive-apache .
  args:
    chdir: /root/apache-and-letsencrypt/production/

- name: Start it via docker-compose up -d
  delegate_to: '{{ backup_server_ip }}'
  command: docker-compose up -d
  args:
    chdir: /root/apache-and-letsencrypt/production/


#0 23 * * * docker run --rm -it --name certbot -v "/docker-volumes/etc/letsencrypt:/etc/letsencrypt" /
#-v "/docker-volumes/var/lib/letsencrypt:/var/lib/letsencrypt" /
#-v "/docker-volumes/data/letsencrypt:/data/letsencrypt" /
#-v "/docker-volumes/var/log/letsencrypt:/var/log/letsencrypt" /
# certbot/certbot renew --webroot -w /data/letsencrypt --quiet /
# && docker kill --signal=HUP production-nginx-container

#- name: Build the Apache Docker image
#  delegate_to: '{{ backup_server_ip }}'
#  command: docker build -t apache2 .
#  args:
#    chdir: /root/

#- name: Ensure Apache image is pulled
#  delegate_to: '{{ backup_server_ip }}'
#  command: docker pull httpd

- name: Ensure grafana.service installed
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/apache2.service.j2"
    dest: "/etc/systemd/system/apache2.service"
    mode: 0644

- name: Start and enable new Grafana unit on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: restarted
    name: grafana
    daemon_reload: yes
    enabled: yes

- name: Start and enable new Apache unit on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: restarted
    name: apache2
    daemon_reload: yes
    enabled: yes

#    When your webserver is running, start the certbot docker (from dockerhub)
