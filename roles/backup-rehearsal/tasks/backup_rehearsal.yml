---

- name: Copy tokens.yml file to local machine
  ansible.builtin.fetch:
    src: /data/projects/awx/tokens.yml
    dest: /tmp/tokens.yml
    flat: yes

- name: Include AWX/Automation Controller master token from awx_tokens.yml
  include_vars:
    file: /tmp/tokens.yml
  no_log: True

- name: Create a AWX session token for executing AWX modules
  awx.awx.tower_token:
    description: 'AWX Session Token'
    scope: "write"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ master_token }}"
    validate_certs: false
  register: awx_session_token

- name: Update 'AWX Ansible' project
  awx.awx.tower_project_update:
    name: "AWX Ansible"
    timeout: 300
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Create 'AWX Recover [Borgmatic]' job template
  awx.awx.tower_job_template:
    name: "AWX Recover [Borgmatic]"
    description: "Recovers a borg backup of local dumps to the target AWX server."
    job_type: run
    inventory: "AWX Server"
    project: "AWX Ansible"
    playbook: "playbooks/restore_borg.yml"
    credentials: [ "AWX SSH Key", "Borgmatic Password" ]
    extra_vars: { awx_url: "{{ awx_url }}", BORG_PASSPHRASE: "{{ backup_passphrase }}", ansible_user: "borg" }
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Create 'AWX Recover [Local Dump]' job template
  awx.awx.tower_job_template:
    name: "AWX Recover [Local Dump]"
    description: "Backs up the AWX host system, dumping a snapshot of it to the local disk."
    job_type: run
    inventory: "Localhost"
    project: "AWX Ansible"
    playbook: playbooks/restore_local.yml
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Add machine credential
  awx.awx.credential:
    name: "AWX Root Key"
    description: "The SSH key for AWX to connect to another instance of itself."
    organization: "{{ org_name }}"
    credential_type: Machine
    state: present
    inputs:
      ssh_key_unlock: "{{ ssh_key_file_password }}"
      ssh_key_data: "{{ lookup('file', '{{ ssh_key_file_private }}') }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Create 'Provision AWX Server' job template
  awx.awx.tower_job_template:
    name: "Provision AWX Server"
    description: "Creates another AWX server with your existing AWX server."
    job_type: run
    inventory: "{{ org_name }}"
    project: "AWX Ansible"
    playbook: setup.yml
    ask_extra_vars: yes
    credential: "AWX Root Key"
    job_tags: provision
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Create 'Deploy AWX Server' job template
  awx.awx.tower_job_template:
    name: "Deploy AWX Server"
    description: "Creates another AWX server with your existing AWX server."
    job_type: run
    inventory: "{{ org_name }}"
    project: "AWX Ansible"
    playbook: setup.yml
    ask_extra_vars: yes
    credential: "AWX Root Key"
    job_tags: setup, setup-firewall, master-token, configure-awx
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Create 'Setup AWX Server' job template
  awx.awx.tower_job_template:
    name: "Setup AWX Server"
    description: "Creates another AWX server with your existing AWX server."
    job_type: run
    inventory: "{{ org_name }}"
    project: "AWX Ansible"
    playbook: setup.yml
    ask_extra_vars: yes
    credential: "AWX Root Key"
    job_tags: master-token, configure-awx
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Create 'Disaster Recovery Rehearsal' workflow template
  awx.awx.workflow_job_template:
    name: "Disaster Recovery Rehearsal"
    description: "Causes AWX to clone itself from its own backup, automatically provisioning the server and DNS records. It then examines if the recovered version is functional, generates a report, then deletes it."
    survey_enabled: true
    survey_spec: "{{ lookup('file', 'roles/backup-rehearsal/surveys/backup_rehearsal.json') }}"
    workflow_nodes:
      - identifier: "Provision AWX Server"
        job_type: run
        unified_job_template:
          name: "Provision AWX Server"
          type: job_template
        related:
          success_nodes:
            - identifier: "Deploy AWX Server"
          failure_nodes:
            - identifier: "Error Report 1"
          always_nodes: []
      - identifier: "Deploy AWX Server"
        job_type: run
        unified_job_template:
          name: "Deploy AWX Server"
          type: job_template
        related:
          success_nodes:
            - identifier: "Recover Borgmatic"
          failure_nodes:
            - identifier: "Error Report 2"
          always_nodes: []
      - identifier: "Recover Borgmatic"
        job_type: run
        unified_job_template:
          name: "AWX Recover [Borgmatic]"
          type: job_template
        related:
          success_nodes: 
            - identifier:	"Recover Local Dump"
          failure_nodes:
            - identifier: "Error Report 3"
          always_nodes: []
      - identifier: "Recover Local Dump"
        job_type: run
        unified_job_template:
          name: "AWX Recover [Local Dump]"
          type: job_template
        related:
          success_nodes: []
          failure_nodes:
            - identifier: "Error Report 4"
          always_nodes: []
      - identifier: "Error Report 1"
        job_type: run
        unified_job_template:
          name: "AWX Error Report"
          type: job_template
      - identifier: "Error Report 2"
        job_type: run
        unified_job_template:
          name: "AWX Error Report"
          type: job_template
      - identifier: "Error Report 3"
        job_type: run
        unified_job_template:
          name: "AWX Error Report"
          type: job_template
      - identifier: "Error Report 4"
        job_type: run
        unified_job_template:
          name: "AWX Error Report"
          type: job_template
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

#- name: Collect timezone of AWX server (Debian and derivatives only)
#  command: cat /etc/timezone
#  register: timezone_output

#- name: Create an rrule string for the 'Deploy an AWX Server'
#  set_fact:
#    rrule_line_update: "DTSTART;TZID={{ timezone_output.stdout }}:{{ update_schedule_start }} RRULE:FREQ={{ update_schedule_frequency }};INTERVAL={{ update_schedule_interval }}"

#- name: Build a schedule for 'Deploy an AWX Server' job template
#  awx.awx.tower_schedule:
#    name: "Deploy AWX Server"
#    enabled: yes
#    state: present
#    unified_job_template: "Deploy an AWX Server"
#    extra_data: "{{ lookup('file', '{{ role_path }}/extra-vars/update_all.json') }}"
#    rrule: "{{ rrule_line_update }}"
#    tower_host: "https://{{ awx_url }}"
#    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
#    validate_certs: false

- name: Add AWX host to the {{ org_name }} inventory
  awx.awx.tower_host:
    name: "{{ new_awx_url }}"
    description: "A new AWX Server, accessed at its URL."
    inventory: "{{ org_name }}"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false
  ignore_errors: True

- name: Add group awx_servers
  awx.awx.tower_group:
    name: awx_servers
    description: "AWX servers."
    inventory: "{{ org_name }}"
    hosts: "{{ new_awx_url }}"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false

- name: Delete the AWX session token for executing modules
  awx.awx.tower_token:
    description: 'AWX Session Token'
    scope: "write"
    state: absent
    existing_token_id: "{{ awx_session_token.ansible_facts.tower_token.id }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: false