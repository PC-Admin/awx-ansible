---

- name: Include AWX/Automation Controller master token from awx_tokens.yml
  delegate_to: localhost
  include_vars:
    file: /tmp/awx/tokens.yml
  no_log: True

- name: Create a AWX/Automation Controller session token for executing AWX modules
  awx.awx.tower_token:
    description: 'AWX/Automation Controller Session Token'
    scope: "write"
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ master_token }}"
    validate_certs: yes
  register: awx_session_token

- name: Add 'AWX on K3s' project to AWX admins organisation
  awx.awx.tower_project:
    name: "AWX on K3s"
    description: "AWX on K3s repository."
    organization: "{{ org_name }}"
    scm_type: git
    scm_url: "https://github.com/kurokobo/awx-on-k3s.git"
    scm_branch: "1.1.1"
    scm_delete_on_update: yes
    scm_update_on_launch: yes
    state: present
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

#https://github.com/kurokobo/awx-on-k3s/commit/364e9c19d0d02794e836260c1800b97415b5dde7

- name: Update 'AWX on K3s' project
  awx.awx.tower_project_update:
    name: "AWX on K3s"
    timeout: 300
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Prepare Service Account and API Token
  command: |
      kubectl -n awx apply -f /root/awx-on-k3s-1.1.0/backup/ansible/rbac/sa.yaml

- name: Customize pod specification for 'AWX Server' Container Instance Group
  awx.awx.instance_group:
    name: "AWX Server"
    is_container_group: True
    pod_spec_override: |
      apiVersion: v1
      kind: Pod
      metadata:
        namespace: awx
      spec:
        serviceAccountName: awx-backup
        automountServiceAccountToken: true
        containers:
          - image: quay.io/ansible/awx-ee:latest
            name: worker
            args:
              - ansible-runner
              - worker
              - '--private-data-dir=/runner'
            resources:
              requests:
                cpu: 250m
                memory: 100Mi
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Create 'Backup AWX System' job template
  awx.awx.tower_job_template:
    name: "Backup AWX System"
    description: "Backs up the AWX/Ansible Controllers host system."
    job_type: run
    inventory: "AWX Server"
    project: "AWX on K3s"
    playbook: backup/ansible/project/backup.yml
    instance_groups: ["AWX Server"]
    state: present
    verbosity: 1
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Collect timezone of AWX/Automation Controller server (Debian and derivatives only)
  command: cat /etc/timezone
  register: timezone_output

- name: Create an rrule string for scheduling 'Backup AWX System'
  set_fact:
    rrule_line_backup_awx: "DTSTART;TZID={{ timezone_output.stdout }}:{{ backup_awx_schedule_start }} RRULE:FREQ={{ backup_awx_schedule_frequency }};INTERVAL={{ backup_awx_schedule_interval }}"

- name: Build a schedule for 'Backup AWX System' job template
  awx.awx.tower_schedule:
    name: "Backup AWX System"
    enabled: yes
    state: present
    unified_job_template: "Backup AWX System"
    #extra_data: "{{ lookup('file', '{{ role_path }}/extra-vars/update_all.json') }}"
    rrule: "{{ rrule_line_backup_awx }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Delete the AWX/Automation Controller session token for executing modules
  awx.awx.tower_token:
    description: 'AWX/Automation Controller Session Token'
    scope: "write"
    state: absent
    existing_token_id: "{{ awx_session_token.ansible_facts.tower_token.id }}"
    tower_host: "https://{{ awx_url }}"
    tower_oauthtoken: "{{ awx_session_token.ansible_facts.tower_token.token }}"
    validate_certs: yes

- name: Add prerequisite packages to backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Add prerequisite packages to AWX
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Ensure root users ~/.ssh/ folder exists on AWX
  ansible.builtin.file:
    path: /root/.ssh/
    state: directory
    mode: 0700
    owner: root
    group: root

- name: Create borg user on AWX server
  ansible.builtin.user:
    name: borg
    shell: /bin/bash
    password: '!'
    generate_ssh_key: yes
    ssh_key_type: ed25519
    ssh_key_file: .ssh/borgmatic

- name: Create borg user on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.user:
    name: borg
    shell: /bin/bash
    password: '!'

- name: Collect public SSH key to variable
  ansible.builtin.slurp:
    src: /home/borg/.ssh/borgmatic.pub
  register: borgmatic_public_key

- name: Print public SSH key
  ansible.builtin.debug:
    msg: "{{ borgmatic_public_key['content'] | b64decode }}"

- name: Ensure root users ~/.ssh/ folder exists on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.file:
    path: /home/borg/.ssh/
    state: directory
    mode: 0700
    owner: borg
    group: borg

- name: Write public SSH key to authorized_keys of backup server'
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.lineinfile:
    path: /home/borg/.ssh/authorized_keys
    regexp: '^command="borg serve --restrict-to-path {{ backup_directory }}",restrict.*$'
    line: |
        command="borg serve --restrict-to-path {{ backup_directory }}",restrict {{ borgmatic_public_key['content'] | b64decode }}
    owner: borg
    group: borg
    mode: '0600'
    create: yes

- name: Add SSH config entry for accessing the backup server
  ansible.builtin.blockinfile:
    path: "/home/borg/.ssh/config"
    marker_begin: "BEGIN SSH config entry for backup server"
    marker_end: "END SSH config entry for backup server"
    block: |
      Host {{ backup_server_ip }}
          HostName {{ backup_server_ip }}
          User borg
          Port 22
          IdentityFile /home/borg/.ssh/borgmatic
          IdentitiesOnly=yes
    owner: borg
    group: borg
    mode: '0600'
    create: yes

- name: Perform initial SSH handshake, accept the key blindly
  become: yes
  become_user: borg
  ansible.builtin.command: |
      ssh -o "StrictHostKeyChecking no" {{ backup_server_ip }} exit

- name: Install Borgmatic on AWX
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Install Borgmatic on the backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Ensure backup directory exists on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.file:
    path: '{{ backup_directory }}'
    state: directory
    mode: 0755
    owner: borg
    group: borg

- name: Add environment variable for borg user
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.lineinfile:
    path: /home/borg/.profile
    regexp: '^export BORG_PASSPHRASE=./*$'
    line: "export BORG_PASSPHRASE={{ backup_passphrase }}"
    owner: borg
    group: borg
    mode: '0600'

- name: Perform borg init on backup server
  delegate_to: '{{ backup_server_ip }}'
  become: yes
  become_user: borg
  shell: 'borg init --encryption=repokey {{ backup_directory }}'
  environment:
    BORG_PASSPHRASE: '{{ backup_passphrase }}'
  args:
    creates: '{{ backup_directory }}nonce'

- name: Ensure borgmatic config directory exists on AWX
  ansible.builtin.file:
    path: '/home/borg/.config/borgmatic/'
    state: directory
    mode: 0755
    owner: borg
    group: borg

- name: Save borgmatic config file, template
  template:
    src: '{{ role_path }}/templates/borg-config.yaml.j2'
    dest: '/home/borg/.config/borgmatic/config.yaml'