---

- name: Install Prometheus Node Exporter on the AWX Server
  ansible.builtin.apt:
    pkg:
    - prometheus
    - prometheus-node-exporter
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Make sure Prometheus unit is running and enabled on AWX Server
  ansible.builtin.systemd:
    state: started
    name: prometheus
    enabled: yes

- name: Make sure Prometheus Node Exporter unit is running and enabled on AWX Server
  ansible.builtin.systemd:
    state: started
    name: prometheus-node-exporter
    enabled: yes

- name: Install the Grafana prerequisites on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - docker.io
    - apache2
    - apt-transport-https
    - certbot
    - python3-certbot-apache
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Install Prometheus Node Exporter on the Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - prometheus
    - prometheus-node-exporter
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Make sure Prometheus unit is running and enabled on AWX Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: started
    name: prometheus
    enabled: yes

- name: Make sure Prometheus Node Exporter unit is running and enabled on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: started
    name: prometheus-node-exporter
    enabled: yes

- name: Update repos on the Backup Server
  delegate_to: '{{ backup_server_ip }}'
  apt:
    update_cache: yes
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Stop grafana in Docker
  delegate_to: '{{ backup_server_ip }}'
  command: /usr/bin/docker stop grafana
  ignore_errors: True

- name: Remove grafana in Docker
  delegate_to: '{{ backup_server_ip }}'
  command: /usr/bin/docker rm grafana 
  ignore_errors: True

#- name: Run grafana in Docker
#  delegate_to: '{{ backup_server_ip }}'
#  command: /usr/bin/docker run -d --name=grafana -p 3000:3000 grafana/grafana

#- name: Ensure grafana image is pulled
#  delegate_to: '{{ backup_server_ip }}'
#  docker_image:
#    name: grafana/grafana
#    source: "pull"
#    state: present
#    pull:
#      platform: amd64
#  register: result
#  retries: 6
#  delay: 10
#  until: result is not failed

- name: Ensure grafana image is pulled
  delegate_to: '{{ backup_server_ip }}'
  command: docker pull grafana/grafana 

- name: Ensure grafana.service installed
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: "{{ role_path }}/templates/grafana.service.j2"
    dest: "/etc/systemd/system/grafana.service"
    mode: 0644

- name: Start and enable new grafana unit on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: started
    name: grafana
    enabled: yes

- name: Check if Diffie Hellman file already exists
  delegate_to: '{{ backup_server_ip }}'
  stat:
    path: '/etc/ssl/grafana_dhparam.pem'
  register: stat_result

- name: Generate Diffie-Hellman parameters if not
  delegate_to: '{{ backup_server_ip }}'
  openssl_dhparam:
    path: '/etc/ssl/grafana_dhparam.pem'
    size: 2048
  when: not stat_result.stat.exists

- name: Check if the cert for Grafana already exists
  delegate_to: '{{ backup_server_ip }}'
  stat:
    path: '/etc/letsencrypt/live/{{ grafana_url }}/fullchain.pem'
  register: stat_result_2

- name: Generate letsencrypt certificate for Grafana if not
  delegate_to: '{{ backup_server_ip }}'
  command: certbot certonly --apache --noninteractive --agree-tos -m {{ certbot_email }} -d '{{ grafana_url }}'
  when: not stat_result_2.stat.exists

#sudo certbot --apache -d grafana.heyvaldemar.net

- name: Creates a crontab entry to renew certbot"
  delegate_to: '{{ backup_server_ip }}'
  cron:
    name: "Renew letsencrypt certificate"
    special_time: daily
    user: root
    job: '/bin/sh /usr/bin/certbot renew --quiet --no-self-upgrade'

- name: Make sure prerequisite Apache units are enabled on Backup Server (1/4)
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: a2enmod proxy
  args:
    creates: '/etc/apache2/mods-enabled/proxy.load'

- name: Make sure prerequisite Apache units are enabled on Backup Server (2/4)
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: a2enmod proxy_http
  args:
    creates: '/etc/apache2/mods-enabled/proxy_http.load'

- name: Make sure prerequisite Apache units are enabled on Backup Server (3/4)
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: a2enmod rewrite
  args:
    creates: '/etc/apache2/mods-enabled/rewrite.load'

- name: Make sure prerequisite Apache units are enabled on Backup Server (4/4)
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: a2enmod ssl
  args:
    creates: '/etc/apache2/mods-enabled/ssl.load'

- name: Template the HTTPS site for Grafana on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.template:
    src: '{{ role_path }}/templates/apache-https.conf.j2'
    dest: /etc/apache2/sites-available/{{ grafana_url }}.conf
    owner: root
    group: root
    mode: '0644'

- name: Enable HTTPS site for Grafana on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: 'a2ensite {{ grafana_url }}.conf'
  args:
    creates: '/etc/apache2/sites-enabled/{{ grafana_url }}.conf'

- name: Disable default Apache site on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: 'a2dissite 000-default.conf'
  args:
    removes: '/etc/apache2/sites-enabled/000-default.conf'

#sudo a2ensite grafana.heyvaldemar.net.conf
#sudo a2ensite grafana.heyvaldemar.net-ssl.conf
#sudo a2dissite 000-default.conf

- name: Test that there are no errors in the syntax of the new Apache config file
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.command: apache2ctl configtest

- name: Restart Apache unit on Backup Server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.systemd:
    state: restarted
    name: apache2
    enabled: yes

- name: Pause for 1 minute so Grafana can warm up
  pause:
    minutes: 1

#- name: Set admin users password for grafana-server 1
#  delegate_to: '{{ backup_server_ip }}'
#  shell: ln -s /var/lib/grafana  /usr/share/grafana/data

#- name: Set admin users password for grafana-server 2
#  delegate_to: '{{ backup_server_ip }}'
#  shell: ln -s /var/log/grafana /usr/share/grafana/data/logs

#- name: Set admin users password for grafana-server 3
#  delegate_to: '{{ backup_server_ip }}'
#  shell: 'grafana-cli --homepath "/usr/local/share/grafana" admin reset-admin-password "{{ grafana_admin_password }}"'

#- name: Update admin Grafana user
#  community.grafana.grafana_user:
#    name: "Administrator"
#    email: "{{ grafana_email }}"
#    login: admin
#    password: "{{ grafana_admin_password }}"
#    is_admin: true
#    state: present
#    url: "https://{{ grafana_url }}"
#    grafana_user: "admin"
#    grafana_password: "admin"

- name: Create local Prometheus datasource
  community.grafana.grafana_datasource:
    name: local_prometheus
    access: proxy
    ds_type: prometheus
    ds_url: 'http://172.17.0.1:9090'
    url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Create local Node Exporter datasource
  community.grafana.grafana_datasource:
    name: local_node_exporter
    access: proxy
    ds_type: prometheus
    ds_url: 'http://172.17.0.1:9100'
    url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Collect AWX public IP
  set_fact:
    awx_public_ip: "{{ ansible_eth0.ipv4.address }}"

- name: Create AWX Prometheus datasource
  community.grafana.grafana_datasource:
    name: awx_prometheus
    access: proxy
    ds_type: prometheus
    ds_url: 'http://{{ awx_public_ip }}:9090'
    grafana_url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Create AWX Node Exporter datasource
  community.grafana.grafana_datasource:
    name: awx_node_exporter
    access: proxy
    ds_type: prometheus
    ds_url: 'http://{{ awx_public_ip }}:9100'
    grafana_url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Import Grafana dashboard Prometheus
  community.grafana.grafana_dashboard:
    folder: General
    dashboard_url: https://grafana.com/api/dashboards/15489/revisions/2/download
    state: present
    grafana_url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Import Grafana dashboard Node Exporter
  community.grafana.grafana_dashboard:
    folder: General
    dashboard_url: https://grafana.com/api/dashboards/1860/revisions/29/download
    state: present
    grafana_url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Create a Grafana folder called 'K3S'
  community.grafana.grafana_folder:
    title: "K3S"
    state: present
    grafana_url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"

- name: Import Grafana dashboard K3S cluster monitoring
  community.grafana.grafana_dashboard:
    folder: K3S
    dashboard_url: https://grafana.com/api/dashboards/15282/revisions/1/download
    state: present
    grafana_url: "https://{{ grafana_url }}"
    grafana_user: "admin"
    grafana_password: "{{ grafana_admin_password }}"



