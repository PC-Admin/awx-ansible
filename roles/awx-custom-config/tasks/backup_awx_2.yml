---

- name: Add prerequisite packages to backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Add prerequisite packages to AWX
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Ensure root users ~/.ssh/ folder exists on AWX
  ansible.builtin.file:
    path: /root/.ssh/
    state: directory
    mode: 0700
    owner: root
    group: root

- name: Create borg user on AWX server
  ansible.builtin.user:
    name: borg
    shell: /bin/bash
    password: '!'
    generate_ssh_key: yes
    ssh_key_type: ed25519
    ssh_key_file: .ssh/borgmatic

- name: Create borg user on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.user:
    name: borg
    shell: /bin/bash
    password: '!'

- name: Collect public SSH key to variable
  ansible.builtin.slurp:
    src: /home/borg/.ssh/borgmatic.pub
  register: borgmatic_public_key

- name: Print public SSH key
  ansible.builtin.debug:
    msg: "{{ borgmatic_public_key['content'] | b64decode }}"

- name: Ensure root users ~/.ssh/ folder exists on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.file:
    path: /home/borg/.ssh/
    state: directory
    mode: 0700
    owner: borg
    group: borg

- name: Write public SSH key to authorized_keys of backup server'
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.lineinfile:
    path: /home/borg/.ssh/authorized_keys
    regexp: '^command="borg serve --restrict-to-path {{ backup_directory }}",restrict.*$'
    line: |
        command="borg serve --restrict-to-path {{ backup_directory }}",restrict {{ borgmatic_public_key['content'] | b64decode }}
    owner: borg
    group: borg
    mode: '0600'
    create: yes

- name: Add SSH config entry for accessing the backup server
  ansible.builtin.blockinfile:
    path: "/home/borg/.ssh/config"
    marker_begin: "BEGIN SSH config entry for backup server"
    marker_end: "END SSH config entry for backup server"
    block: |
      Host {{ backup_server_ip }}
          HostName {{ backup_server_ip }}
          User borg
          Port 22
          IdentityFile /home/borg/.ssh/borgmatic
          IdentitiesOnly=yes
    owner: borg
    group: borg
    mode: '0600'
    create: yes

- name: Perform initial SSH handshake, accept the key blindly
  become: yes
  become_user: borg
  ansible.builtin.command: |
      ssh -o "StrictHostKeyChecking no" {{ backup_server_ip }} exit

- name: Install Borgmatic on AWX
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Install Borgmatic on the backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.apt:
    pkg:
    - borgmatic
  register: apt_status
  until: apt_status is success
  delay: 6
  retries: 10

- name: Ensure backup directory exists on backup server
  delegate_to: '{{ backup_server_ip }}'
  ansible.builtin.file:
    path: '{{ backup_directory }}'
    state: directory
    mode: 0755
    owner: borg
    group: borg

#- name: Add environment variable for borg user
#  delegate_to: '{{ backup_server_ip }}'
#  ansible.builtin.lineinfile:
#    path: /home/borg/.profile
#    regexp: '^export BORG_PASSPHRASE=./*$'
#    line: "export BORG_PASSPHRASE={{ backup_passphrase }}"
#    owner: borg
#    group: borg
#    mode: '0600'

- name: Perform borg init on backup server
  delegate_to: '{{ backup_server_ip }}'
  become: yes
  become_user: borg
  shell: 'borg init --encryption=repokey {{ backup_directory }}'
  environment:
    BORG_PASSPHRASE: '{{ backup_passphrase }}'
  args:
    creates: '{{ backup_directory }}nonce'

#runuser -u borg -- borg init --encryption=repokey {{ backup_directory }}
#' export BORG_PASSPHRASE={{ backup_passphrase }}; borg init --encryption=repokey {{ backup_directory }}'

- name: Ensure borgmatic config directory exists on AWX
  ansible.builtin.file:
    path: '/home/borg/.config/borgmatic/'
    state: directory
    mode: 0755
    owner: borg
    group: borg

- name: Save borgmatic config file, template
  template:
    src: '{{ role_path }}/templates/borg-config.yaml.j2'
    dest: '/home/borg/.config/borgmatic/config.yaml'